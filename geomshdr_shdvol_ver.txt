
/* Geometry shader based shadow volume (method from GPU Gems 3, chapter 11):
 * point/directional light, zfail, infinite
 * expects vertex at index 0 to represent no adjacency (aka a hole in the mesh)
 * light is in world space
 */
 
[vertex_shader]

#version 440

layout(location = 0) in vec4 a_pos;

out int vertexID;

uniform mat4 u_modelMat;

void main() {
    vertexID=gl_VertexID;
    gl_Position=u_modelMat*a_pos;
}

[geometry_shader]

#version 440

layout(triangles_adjacency) in;
layout(triangle_strip, max_vertices=18) out;

in int vertexID[];

uniform mat4 u_viewProjMat;
uniform vec4 u_light;

bool isFaceLit(vec3 v0, vec3 v1, vec3 v2) {
    //switch v0 with v2 for backfaced
    
    vec3 n=cross(v1-v0,v2-v0);
    vec3 d0 = u_light.xyz-u_light.w*v0;
    vec3 d1 = u_light.xyz-u_light.w*v1;
    vec3 d2 = u_light.xyz-u_light.w*v2;
    return (dot(n,d0)>0.0 || dot(n,d1)>0.0 || dot(n,d2)>0.0);
}

void main() {
    if(!isFaceLit(gl_in[0].gl_Position.xyz,gl_in[2].gl_Position.xyz,gl_in[4].gl_Position.xyz)) {
        return;
    }

    for(int i=0; i<3; i++) {
        int i0 = i*2;
        int nb = (i*2+1);
        int i1 = (i*2+2) % 6;

        if(vertexID[nb]==0||!isFaceLit(gl_in[i0].gl_Position.xyz,gl_in[nb].gl_Position.xyz,gl_in[i1].gl_Position.xyz)) {
            //emit extruded edge
            gl_Position = u_viewProjMat*gl_in[i0].gl_Position;
            EmitVertex();

            gl_Position = u_viewProjMat*vec4(u_light.w*gl_in[i0].gl_Position.xyz - u_light.xyz, 0.0);
            EmitVertex();

            gl_Position = u_viewProjMat*gl_in[i1].gl_Position;
            EmitVertex();

            gl_Position = u_viewProjMat*vec4(u_light.w*gl_in[i1].gl_Position.xyz - u_light.xyz, 0.0);
            EmitVertex();

            EndPrimitive();
        }
    }
    
    //remove below for zpass

    //emit front cap
    gl_Position = u_viewProjMat*gl_in[0].gl_Position;
    EmitVertex();

    gl_Position = u_viewProjMat*gl_in[2].gl_Position;
    EmitVertex();

    gl_Position = u_viewProjMat*gl_in[4].gl_Position;
    EmitVertex();

    EndPrimitive();

    //emit back cap
    gl_Position = u_viewProjMat*vec4(u_light.w*gl_in[4].gl_Position.xyz-u_light.xyz,0.0);
    EmitVertex();

    gl_Position = u_viewProjMat*vec4(u_light.w*gl_in[2].gl_Position.xyz-u_light.xyz,0.0);
    EmitVertex();

    gl_Position = u_viewProjMat*vec4(u_light.w*gl_in[0].gl_Position.xyz-u_light.xyz,0.0);
    EmitVertex();

    EndPrimitive();
}

[prepare_geometry_js]

function generateTriangleAdjacencies(verts,inds,noadjInd=0) {
    var halfEdges={};
    var adjInds=[];
    
    for(var i=0;i<inds.length/3;i++) {
        var ind0=inds[i*3+0];
        var ind1=inds[i*3+1];
        var ind2=inds[i*3+2];

        var key0=ind0+" "+ind1;
        var key1=ind1+" "+ind2;
        var key2=ind2+" "+ind0;
                
        halfEdges[key0]=(key0 in halfEdges)?halfEdges[key0]:[];
        halfEdges[key1]=(key1 in halfEdges)?halfEdges[key1]:[];
        halfEdges[key2]=(key2 in halfEdges)?halfEdges[key2]:[];
        
        halfEdges[key0].push(ind2);
        halfEdges[key1].push(ind0);
        halfEdges[key2].push(ind1);
    }
    
    for(var i=0;i<inds.length/3;i++) {
        var ind0=inds[i*3+0];
        var ind1=inds[i*3+1];
        var ind2=inds[i*3+2];

        var oth0=halfEdges[ind1+" "+ind0]||[];
        var oth1=halfEdges[ind2+" "+ind1]||[];
        var oth2=halfEdges[ind0+" "+ind2]||[];
        
        var cur0=halfEdges[ind0+" "+ind1]||[];
        var cur1=halfEdges[ind1+" "+ind2]||[];
        var cur2=halfEdges[ind2+" "+ind0]||[];
        
        adjInds.push(inds[i*3+0]);
        adjInds.push((oth0.length==1 && cur0.length==1)?oth0[0]:noadjInd);
        adjInds.push(inds[i*3+1]);
        adjInds.push((oth1.length==1 && cur1.length==1)?oth1[0]:noadjInd);
        adjInds.push(inds[i*3+2]);
        adjInds.push((oth2.length==1 && cur2.length==1)?oth2[0]:noadjInd);
    }
    
    return adjInds;
}
